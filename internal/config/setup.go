package config

import (
	"errors"
	"os"

	"github.com/BurntSushi/toml"
)

// InitConfig is the main entry point for loading the application configuration.
func InitConfig(path string) (*Config, error) {
	if err := ensureConfigFileExists(path); err != nil {
		return nil, err
	}

	var cfg Config
	if _, err := toml.DecodeFile(path, &cfg); err != nil {
		return nil, err
	}

	return &cfg, nil
}

// ensureConfigFileExists checks if a config file exists at the given path.
// If it doesn't, it creates a default one.
func ensureConfigFileExists(path string) error {
	_, err := os.Stat(path)
	if err == nil {
		return nil
	}

	if errors.Is(err, os.ErrNotExist) {
		return createDefaultConfig(path)
	}

	return err
}

// createDefaultConfig creates a new configuration file at the specified path
// and populates it with the default settings.
func createDefaultConfig(path string) error {
	const content = `# Clipmux Configuration File
# --------------------------
# All options are optional — if omitted, built-in defaults are used.
# Uncomment and adjust values as needed.

# Maximum number of items stored in history.
# Default: 10
# capacity = 10

# Maximum size (in bytes) allowed for a single clipboard item.
# Larger items are truncated.
# Default: 2048
# maxItemBytes = 2048

# History ordering:
# If true, newest items are placed at index 0.
# If false (default), oldest items are at index 0. 
# newestFirst = false

# Allow duplicate clipboard entries in history.
# If false (default), duplicates are removed (no repeats).
# If true, non-consective duplicates are allowed.
# allowDuplicates = false

# Base index for displaying history items.
# Default is 0. Set to 1 if you prefer 1-based indexing.
# baseIndex = 0

# Capture the current clipboard content when Clipmux starts.
# Default: true
# captureInitialClipboard = true

# Base hotkey for pasting items from history.
# Additional hotkeys are generated by appending numbers (0-9).
# Default: ["ctrl", "shift", "h"] → Ctrl+Shift+H+1 pastes history[1].
# pasteHotkeysBase = ["ctrl", "shift", "h"] 

# Enable debug logging for troubleshooting.
# Default: false
# debug = false

# Directory to store log file. 
# Default: $HOME/.clipmux/logs/YYYY-MM-DD.log 
# loggerDir = "$HOME/.clipmux/logs"

# Directory to store config file (usually this file).
# Default: $HOME/.clipmux
# configDir = "$HOME/.clipmux"
`
	return os.WriteFile(path, []byte(content), 0644)
}
